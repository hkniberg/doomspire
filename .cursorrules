# Project: Lords of Doomspire Board Game Design

This repository represents the design and development of **Lords of Doomspire**, a strategic board game where players command champions to explore a dangerous island, gather resources, and ultimately defeat a dragon.

## Project Structure

- **Game Overview**: See`docs/game-overview.md`
- **Rules**: The game rules exist in three versions:
  - `docs/game-rules.md` = the canonical version, for the printed board game and human players. The code should reflect these rules. The rules are the source of truth. If you see anything that seems incorrect or inconsistent with the rules, please point this out.
  - `simulation/pages/cheat-sheet.tsx` = the consolidated game reference cheat sheet, packaged as a web page.
  - `simulation/public/prompts/game-rules-for-ai.md` = AI-adapted rules of the game, with minor changes to make it work better in the simulator context.
  - If you update any of these, then update the other versions as well to keep them in sync. Or at least warn the user.
- **Simulation**: All simulation code is in the `simulation/` directory, which is structured as a single-page Next.js frontend app, but should also be able to run as a headless script to run a simulated match or turn. Tests are in the simulation/test directory.
- **Documentation**: Additional design documents in the `docs/` folder

## Game Overview

Lords of Doomspire is a 4-player strategic board game featuring:

- Resource management and trading
- Champion-based exploration mechanics
- Combat system with dice rolling
- Territory claiming and building construction
- Multiple victory conditions

## Context for AI Assistants

This is a board game design project, not a software application. Code in the simulation directory should accurately reflect the game mechanics described in the rulebook. Any changes to game mechanics should be carefully considered for their impact on game balance and player experience.

## Coding guidelines

- Clear separation between the simulation and the UI. The simulation should be able to run without the UI.
- Follow next.js default patterns to enable easy deployment to Vercel.
- The game simulator UI should be a single page application, with a single route for the core simulation.
- The UI code should be well organized into components, to avoid single large files. Components should reflect game elements as much as possible (card, tile, champion, etc).
- Never use emoji characters in the UI, since they are not supported by all browsers.
- Keep the code as simple and clean as possible.
- Performance doesn't matter. This is just for internal use, not a commercial product.
- Use types for all variables and function parameters, avoid using `any` or `unknown` unless there is a specific reason.

### Code Reuse and Utilities

- **Before implementing player, champion, or card-related functionality**, check `simulation/src/players/PlayerUtils.ts` first for existing utilities.
- **Before implementing board navigation or game state manipulation**, check `simulation/src/game/GameState.ts` for existing methods.
- Feel free to add new common utilities there when needed,

### Key Import Paths

Use these exact import paths to avoid module resolution issues:

- `@/lib/GameSettings` - Game balance constants and costs
- `@/engine/GameMaster` - Main game engine
- `@/players/PlayerUtils` - Player utility functions (canAfford, deductCost, etc.)
- `@/game/GameState` - Game state management
- `@/players/ClaudePlayer` - Claude AI player implementation
- `@/players/RandomPlayerAgent` - Random player implementation
- `@/lib/types` - Type definitions
- `@/lib/actionTypes` - Action-related type definitions
- `@/lib/utils` - General utility functions (formatCost, formatResources, etc.)

## Terminology

- "knight" and "champion" mean the same thing. Knight is used in the game rules, while champion is the internal name in the code and UI. Keep it that way for now.

## Testing and running

- Don't run or build the next.js app automatically when making changes. When working on the web app, I will already have `npm run dev` running in the background.
- When needed, you can run `node run-test.js --single-turn` to run a single turn of the game in a headless mode to check that things are working. Or run `node run-test.js --complete` to run a complete game. Or run `node run-test.js --turns X` to run a specific number of turns.
- You can change the starting resources for the random players by adding the following arguments: `--gold N`, `--fame N`, `--might N`, `--food N`, `--wood N`, `--ore N`. This is useful for accelerating the simulation when testing.
- You can specify player types using `--p1 claude`, `--p2 random`, etc. Available types are `random` and `claude`. Don't use claude unless asked, since using it is slow and costly.
- To test specific cards, you can temporarily rig the deck using the `ONLY_INCLUDE_CARDS` variable in `simulation/src/lib/cards.ts`.

## Committing

When I write "commit", you should check the diff and write a brief commit message in past tense, tell it to me, and then commit. Don't push.
Never commit automatically, only if I ask you to.
