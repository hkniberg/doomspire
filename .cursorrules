# Project: Lords of Doomspire Board Game Design

This repository represents the design and development of **Lords of Doomspire**, a strategic board game where players command champions to explore a dangerous island, gather resources, and ultimately defeat a dragon.

## Project Structure

- **Game Overview**: See`docs/game-overview.md`
- **Rules**: Complete game rules are documented in `docs/game-rules.md`. The code should reflect the rules. The rules are the source of truth. If you see anything that seems incorrect or inconsistent with the rules, please point this out.
- **Simulation**: All simulation code is in the `simulation/` directory, which is structured as a single-page Next.js frontend app, but should also be able to run as a headless script to run a simulated match or turn.
- **Documentation**: Additional design documents in the `docs/` folder

## Game Overview

Lords of Doomspire is a 4-player strategic board game featuring:

- Resource management and trading
- Champion-based exploration mechanics
- Combat system with dice rolling
- Territory claiming and building construction
- Multiple victory conditions

## Context for AI Assistants

This is a board game design project, not a software application. Code in the simulation directory should accurately reflect the game mechanics described in the rulebook. Any changes to game mechanics should be carefully considered for their impact on game balance and player experience.

## Coding guidelines

- Clear separation between the simulation and the UI. The simulation should be able to run without the UI.
- Follow next.js default patterns to enable easy deployment to Vercel.
- The UI should be a single page application, with a single route.
- The UI code should be well organized into components, to avoid single large files. Components should reflect game elements as much as possible (card, tile, champion, etc).
- Keep the code as simple and clean as possible.
- Performance doesn't matter. This is just for internal use, not a commercial product.

## Testing and running

- Don't run or build the next.js app automatically when making changes. When working on the web app, I will already have `npm run dev` running in the background.
- When needed, you can run `node run-test.js --single-turn` to run a single turn of the game in a headless mode to check that things are working.

## Committing

When I write "commit", you should check the diff and write a brief commit message in past tense, tell it to me, and then commit. Don't push.
